name: Run Code Tests

on:
  push:
    paths:
      - "solutions/**"
  pull_request:
    paths:
      - "tests/**"

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Detect Changed Files
        id: changed-files
        run: |
          BEFORE_COMMIT="${{ github.event.before }}"
          if [ -z "$BEFORE_COMMIT" ] || ! git cat-file -e "$BEFORE_COMMIT"^{commit}; then
            BEFORE_COMMIT=$(git rev-parse HEAD~1)
          fi

          CHANGED_FILES=$(git diff --name-only "$BEFORE_COMMIT" HEAD | grep '^solutions/')
          echo "Detected changed files (raw): $CHANGED_FILES"

          if [ -z "$CHANGED_FILES" ]; then
            echo "No file changes detected in solutions/ directory. Exiting..."
            exit 1
          fi

          CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ' | sed 's/ /\n/g' | sort -u)
          echo "Detected changed files (filtered): $CHANGED_FILES"

          echo "CHANGED_FILES=$(echo "$CHANGED_FILES" | tr '\n' ' ')" >> $GITHUB_ENV
          echo "Debug: CHANGED_FILES after setting env: $CHANGED_FILES"

      - name: List All Files in solutions/ Directory
        run: |
          echo "Listing all files in solutions/ directory:"
          ls -l solutions/

      - name: Check for Empty Implementations
        id: check-implementation
        run: |
          INCOMPLETE_FILES=""
          for file in $CHANGED_FILES; do
            echo "Checking file: $file"
            if [[ "$file" == *.java ]]; then
              echo "Checking Java file: $file"
              # Look for public method signatures ending with '{'
              FUNCTION_SIGNATURES=$(grep -nE '^\s*public\s+.*\s*\(.*\)\s*\{' "$file")
              while IFS= read -r line; do
                LINE_NUM=$(echo "$line" | cut -d: -f1)
                END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
                if [ -n "$END_LINE" ]; then
                  # Extract the implementation between the method signature and closing brace
                  IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 1)) | grep -vE '^\s*(//|/\*.*\*/$|^$)')
                  echo "Implementation for method at line $LINE_NUM:"
                  echo "$IMPLEMENTATION"
                  LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
                  echo "Line count: $LINE_COUNT"
                  # Extract the return type accurately
                  RETURN_TYPE=$(echo "$line" | grep -oE 'public\s+([a-zA-Z_][a-zA-Z0-9_]*(\[\])?)\s+\w+\s*\(' | grep -oE '[a-zA-Z_][a-zA-Z0-9_]*(\[\])?' | head -n 1)
                  echo "Return type: $RETURN_TYPE"
                  if [ "$RETURN_TYPE" != "void" ] && ! echo "$IMPLEMENTATION" | grep -qE '^\s*return\s'; then
                    echo "Non-void method lacks return statement"
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                  elif [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|return\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                    echo "Method lacks meaningful logic or has too few lines"
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                  fi
                else
                  echo "No closing brace found for method at line $LINE_NUM"
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                fi
              done <<< "$FUNCTION_SIGNATURES"
            elif [[ "$file" == *.c ]]; then
              echo "Checking C file: $file"
              FUNCTION_SIGNATURES=$(grep -nE '^\s*[a-zA-Z_][a-zA-Z0-9_]*\s+[a-zA-Z_][a-zA-Z0-9_]*\s*\(.*\)\s*\{' "$file")
              while IFS= read -r line; do
                LINE_NUM=$(echo "$line" | cut -d: -f1)
                END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
                if [ -n "$END_LINE" ]; then
                  IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 1)) | grep -vE '^\s*(//|/\*.*\*/$|^$)')
                  LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
                  if [ "$LINE_COUNT" -le 1 ]; then
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                  fi
                else
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                fi
              done <<< "$FUNCTION_SIGNATURES"
            elif [[ "$file" == *.cpp ]]; then
              if grep -qE '^\s*(vector<.*>|std::vector<.*>)\s+threeSum\s*\((vector<.*>|std::vector<.*>)\s*(&|)\s*nums\)\s*\{' "$file"; then
                LINE_NUM=$(grep -nE '^\s*(vector<.*>|std::vector<.*>)\s+threeSum\s*\((vector<.*>|std::vector<.*>)\s*(&|)\s*nums\)\s*\{' "$file" | cut -d: -f1)
                END_LINE=$(tail -n +$LINE_NUM "$file" | grep -nE '^\s*\}' | head -n 1 | cut -d: -f1)
                if [ -n "$END_LINE" ]; then
                  IMPLEMENTATION=$(tail -n +$((LINE_NUM + 1)) "$file" | head -n $((END_LINE - 1)) | grep -vE '^\s*(//|/\*.*\*/$|^$)')
                  LINE_COUNT=$(echo "$IMPLEMENTATION" | grep -vE '^\s*$' | wc -l)
                  if [ "$LINE_COUNT" -le 1 ] || ! echo "$IMPLEMENTATION" | grep -qE '^\s*(if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                  fi
                else
                  INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                fi
              fi
            elif [[ "$file" == *.py ]]; then
              if grep -qE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file"; then
                LINE_NUM=$(grep -nE '^\s*def\s+threeSum\s*\(self,\s*nums\):' "$file" | cut -d: -f1)
                if ! tail -n +$LINE_NUM "$file" | grep -vE '^\s*("""|\#)' | grep -qE '^\s*(return\s|if\s|for\s|while\s|[a-zA-Z_][a-zA-Z0-9_]*\s*=|[a-zA-Z_][a-zA-Z0-9_]*\s*\()(.*)'; then
                    INCOMPLETE_FILES="$INCOMPLETE_FILES $file"
                fi
              fi
            fi
          done

          if [ -n "$INCOMPLETE_FILES" ]; then
            echo "Some files only contain function signatures without implementation: $INCOMPLETE_FILES"
            exit 1
          fi

      - name: Determine File Type
        id: determine-file
        run: |
          DETECTED_LANGUAGES=""
          for file in $CHANGED_FILES; do
            case "$file" in
              *.c) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C " ;;
              *.cpp) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}C++ " ;;
              *.py) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Python " ;;
              *.java) DETECTED_LANGUAGES="${DETECTED_LANGUAGES}Java " ;;
            esac
          done
          DETECTED_LANGUAGES=$(echo "$DETECTED_LANGUAGES" | xargs | sort -u)
          echo "LANGUAGE=$DETECTED_LANGUAGES" >> $GITHUB_ENV

      - name: Update Package Lists
        if: contains(env.LANGUAGE, 'C') || contains(env.LANGUAGE, 'C++') || contains(env.LANGUAGE, 'Python') || contains(env.LANGUAGE, 'Java')
        run: sudo apt update

      - name: Install C Dependencies
        if: contains(env.LANGUAGE, 'C')
        run: sudo apt install -y gcc

      - name: Install C++ Dependencies
        if: contains(env.LANGUAGE, 'C++')
        run: sudo apt install -y g++

      - name: Install Python Dependencies
        if: contains(env.LANGUAGE, 'Python')
        run: sudo apt install -y python3

      - name: Install Java Dependencies
        if: contains(env.LANGUAGE, 'Java')
        run: sudo apt install -y openjdk-17-jdk-headless

      - name: Compile and Run Java Tests
        if: contains(env.LANGUAGE, 'Java')
        run: |
          if [ -f tests/Test.java ]; then
            # Compile both Test.java and Solution.java into the out directory
            javac -d out tests/Test.java solutions/Solution.java
            
            # Debugging: Check if the .class files are properly compiled
            ls -l out/
            
            # Run the compiled Java test
            java -cp out Test | tee -a test_results.log
          else
            echo "No Java test file found."
          fi