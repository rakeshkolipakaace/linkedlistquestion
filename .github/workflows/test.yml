name: Run Code Tests

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  run-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Detect Changed Files
        id: changed-files
        uses: tj-actions/changed-files@v44

      - name: Check for 'return' keyword in solution files
        id: check-return
        run: |
          echo "Checking for 'return' keyword in solution files..."
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          SOLUTION_WITHOUT_RETURN=0

          for FILE in $CHANGED_FILES; do
            if [[ "$FILE" =~ ^solutions/.*\.(c|cpp|py|java)$ ]]; then
              echo "Checking file: $FILE"

              if [[ "$FILE" == *.py ]]; then
                CODE_LINES=$(grep -vE '^\s*#' "$FILE")
              else
                CODE_LINES=$(grep -vE '^\s*//' "$FILE")
              fi

              if ! echo "$CODE_LINES" | grep -q "\breturn\b"; then
                echo "‚ùå The file $FILE does not contain a non-commented 'return' statement."
                SOLUTION_WITHOUT_RETURN=1
              else
                echo "‚úÖ The file $FILE contains a non-commented 'return' statement."
              fi
            fi
          done

          if [[ $SOLUTION_WITHOUT_RETURN -eq 1 ]]; then
            echo "‚ùå Skipping further steps as no non-commented 'return' statement was found in the solution code."
            exit 1
          fi

      - name: Determine Changed Solution File
        id: detect-language
        run: |
          echo "Detecting changed solution files..."
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"

          RUN_C=0
          RUN_CPP=0
          RUN_PYTHON=0
          RUN_JAVA=0
          COUNT=0

          for FILE in $CHANGED_FILES; do
            case "$FILE" in
              solutions/*.c) RUN_C=1; COUNT=$((COUNT+1)) ;;
              solutions/*.cpp) RUN_CPP=1; COUNT=$((COUNT+1)) ;;
              solutions/*.py) RUN_PYTHON=1; COUNT=$((COUNT+1)) ;;
              solutions/*.java) RUN_JAVA=1; COUNT=$((COUNT+1)) ;;
            esac
          done

          echo "RUN_C=$RUN_C" >> $GITHUB_ENV
          echo "RUN_CPP=$RUN_CPP" >> $GITHUB_ENV
          echo "RUN_PYTHON=$RUN_PYTHON" >> $GITHUB_ENV
          echo "RUN_JAVA=$RUN_JAVA" >> $GITHUB_ENV
          echo "SOLUTION_COUNT=$COUNT" >> $GITHUB_ENV

      - name: Stop if multiple solution files changed
        if: env.SOLUTION_COUNT != '1'
        run: |
          echo "‚ùå Skipping execution because $SOLUTION_COUNT solution files were changed. Only one is allowed."
          exit 0

      - name: Install C Dependencies
        if: env.RUN_C == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üîß Installing C dependencies..."
          sudo apt-get update
          sudo apt-get install -y gcc

      - name: Install C++ Dependencies
        if: env.RUN_CPP == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üîß Installing C++ dependencies..."
          sudo apt-get update
          sudo apt-get install -y g++

      - name: Install Java Dependencies
        if: env.RUN_JAVA == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üîß Installing Java dependencies..."
          sudo apt-get update
          sudo apt-get install -y default-jdk

      - name: Install Python Dependencies
        if: env.RUN_PYTHON == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üîß No external Python dependencies to install."

      - name: Compile and Run C Tests
        if: env.RUN_C == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üöÄ Running C Test Cases..."
          gcc -o tests/test tests/test.c
          ./tests/test

      - name: Compile and Run C++ Tests
        if: env.RUN_CPP == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üöÄ Running C++ Test Cases..."
          g++ -o tests/test tests/test.cpp 
          ./tests/test

      - name: Run Python Tests
        if: env.RUN_PYTHON == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üöÄ Running Python Test Cases..."
          export PYTHONUNBUFFERED=1
          export PYTHONPATH=$PWD
          python3 tests/test.py | tee test_results.log

      - name: Compile and Run Java Tests
        if: env.RUN_JAVA == '1' && env.SOLUTION_COUNT == '1'
        run: |
          echo "üöÄ Running Java Test Cases..."
          javac -d . solutions/Solution.java tests/Test.java
          java tests.Test | tee test_results_java.log

      - name: Upload Test Results (Python only)
        if: env.SOLUTION_COUNT == '1' && env.RUN_PYTHON == '1'
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test_results.log

      - name: Upload Java Test Results
        if: env.SOLUTION_COUNT == '1' && env.RUN_JAVA == '1'
        uses: actions/upload-artifact@v4
        with:
          name: java-test-results
          path: test_results_java.log
